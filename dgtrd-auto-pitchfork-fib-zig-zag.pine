//@version=4
// ══════════════════════════════════════════════════════════════════════════════════════════════════ //
//# * ══════════════════════════════════════════════════════════════════════════════════════════════
//# *
//# * Study       : Auto Pitchfork, Fib Retracement and Zig Zag
//# *                - Auto Pitchfork, derived from build-in Auto Fib Retracement
//# *                - Auto Fib Retracement, build-in
//# *                - Zig Zag, derived from build-in Auto Fib Retracement 
//# * Author      : © dgtrd
//# *
//# * Revision History
//# *  Release    : Mar 29, 2021
//# *  Update     : Apr 03, 2021 : Added extended Pitchfork Levels (1.5, 1.75, 2)
//# *                              Added ability to display previous Pivot Low/High Fib Retracement Levels
//# *
//# * ══════════════════════════════════════════════════════════════════════════════════════════════
// ══════════════════════════════════════════════════════════════════════════════════════════════════ //

study("Auto Pitchfork, Fib Retracement and Zig Zag by DGT", "PITCHFORK ʙʏ DGT ☼☾", true, max_lines_count = 144)

// -Inputs ══════════════════════════════════════════════════════════════════════════════════════ //

// ---------------------------------------------------------------------------------------- //
// pivots threshold - base for Auto Pitchfork, Auto Fib Retracement and Zig Zag

threshold_multiplier = input(3,  "Deviation", type = input.float  , minval = 0, inline = "Pivots")
dev_threshold        = atr(10) / close * 100 * threshold_multiplier
depth                = input(11, "Depth"    , type = input.integer, minval = 1, inline = "Pivots")

// pivots threshold
// ---------------------------------------------------------------------------------------- //
// Zig Zag

ZigZag         = input(false, "Zig Zag"                                     , inline = "ZZ", group = "Zig Zag Settings")
zzColor        = input(color.orange, ""                                     , inline = "ZZ", group = "Zig Zag Settings")
zzWidth        = input(1      , "", minval = 1                              , inline = "ZZ", group = "Zig Zag Settings")
zzStyle        = input("Solid", "", options = ["Dashed", "Dotted", "Solid"] , inline = "ZZ", group = "Zig Zag Settings")

// Zig Zag
// ---------------------------------------------------------------------------------------- //
// Pitchfork

group_pitchfork = "Pitchfork Settings"

pPitch    = input(true   , ""                                             , inline = "PIT", group = group_pitchfork)
pTypeP    = input("Original", "Pitchfork Type", 
                       options = ["Original", "Schiff", "Modified Schiff"], inline = "PIT", group = group_pitchfork)
pextendL  = input(false, "Extend Lines"                                   , inline = "PIT", group = group_pitchfork)
pcolor_m  = input(#f44336, "Median Line"                                  , inline = "PLM", group = group_pitchfork)
pwidth_m  = input(3      , "", minval = 1                                 , inline = "PLM", group = group_pitchfork)
pstyle_m  = input("Solid", "", options = ["Dashed", "Dotted", "Solid"]    , inline = "PLM", group = group_pitchfork)

// Pitchfork
// ---------------------------------------------------------------------------------------- //
// Fibonacci 

group_fib_Retracement = "Fibonacci Retracement Settings"

isFib           = input(true, "On/Off Fib Retracement"                                                    , group = group_fib_Retracement)
prevLevel       = input(true , "Previous Pivot L/H Fib Levels  |  Reverse Levels", inline = "Fib Levels"  , group = group_fib_Retracement)
reverse         = input(false, ""                                                , inline = "Fib Levels"  , group = group_fib_Retracement)
var extendLeft  = input(false, "Extend Left    |    Extend Right"                , inline = "Extend Lines", group = group_fib_Retracement)
var extendRight = input(true, ""                                                 , inline = "Extend Lines", group = group_fib_Retracement)

var extending = extend.none
if extendLeft and extendRight
    extending := extend.both

if extendLeft and not extendRight
    extending := extend.left

if not extendLeft and extendRight
    extending := extend.right

levels         = input(true,     "Show Levels"                      , inline = "Levels", group = group_fib_Retracement)
levelsFormat   = input("Values", "", options = ["Values", "Percent"], inline = "Levels", group = group_fib_Retracement)
prices         = input(true,     "Prices"                           , inline = "Levels", group = group_fib_Retracement)
labelsPosition = input("Right" , "", options = ["Left", "Right"]    , inline = "Levels", group = group_fib_Retracement)

// Fibonacci 
// ---------------------------------------------------------------------------------------- //

// -Calculations ════════════════════════════════════════════════════════════════════════════════ //

// ---------------------------------------------------------------------------------------- //
// Fibonacci 

var line lineLast = na
var int iLast     = 0
var int iPrev     = 0
var float pLast   = 0
var isHighLast    = false // otherwise the last pivot is a low pivot

pivots(src, length, isHigh) =>
    l2 = length * 2
    c  = nz(src[length])
    ok = true
    
    for i = 0 to l2
        if isHigh and src[i] > c
            ok := false

        if not isHigh and src[i] < c
            ok := false
    if ok
        [bar_index[length], c]
    else
        [int(na), float(na)]

[iH, pH] = pivots(high, depth / 2, true )
[iL, pL] = pivots(low , depth / 2, false)

calc_dev(base_price, price) =>
    100 * (price - base_price) / price

pivotFound(dev, isHigh, index, price) =>
    if isHighLast == isHigh and not na(lineLast)
        // same direction
        if isHighLast ? price > pLast : price < pLast
            line.set_xy2(lineLast, index, price)
            [lineLast, isHighLast]
        else
            [line(na), bool(na)]
    else // reverse the direction (or create the very first line)
        if abs(dev) > dev_threshold
            // price move is significant
            
            // ---------------------------------------------------------------------------------------- //
            [zzCol, zzWid, zzSty] = if not ZigZag
                [isFib ? color.gray : na, 1, line.style_dashed]
            else
                [zzColor, zzWidth, zzStyle == "Solid" ? line.style_solid : zzStyle == "Dotted" ? line.style_dotted : line.style_dashed]
            // ---------------------------------------------------------------------------------------- //

            id = line.new(iLast, pLast, index, price, color=zzCol, width=zzWid, style=zzSty)
            [id, isHigh]
        else
            [line(na), bool(na)]

// Fibonacci 
// ---------------------------------------------------------------------------------------- //
// Pitchfork References

var iPrevPivot    = 0
var pPrevPivot    = 0.
var iLastPivot    = 0
var pLastPivot    = 0.
var iPrev2Pivot   = 0
var pPrev2Pivot   = 0.

// Pitchfork References
// ---------------------------------------------------------------------------------------- //
// Fibonacci, Pitchfork and Zig Zag

if not na(iH)
    dev          = calc_dev(pLast, pH)
    [id, isHigh] = pivotFound(dev, true, iH, pH)

    if not na(id)
        if id != lineLast
            // ---------------------------------------------------------------------------------------- //

            iPrev2Pivot := iPrevPivot
            pPrev2Pivot := pPrevPivot
            iPrevPivot  := line.get_x1(lineLast)
            pPrevPivot  := line.get_y1(lineLast)
            iLastPivot  := line.get_x2(lineLast)
            pLastPivot  := line.get_y2(lineLast)
            
            if not ZigZag
            // ---------------------------------------------------------------------------------------- //

                line.delete(lineLast)
        
        lineLast   := id
        isHighLast := isHigh
        iPrev      := iLast
        iLast      := iH
        pLast      := pH
else
    if not na(iL)
        dev          = calc_dev(pLast, pL)
        [id, isHigh] = pivotFound(dev, false, iL, pL)
        
        if not na(id)
            if id != lineLast
                // ---------------------------------------------------------------------------------------- //

                iPrev2Pivot := iPrevPivot
                pPrev2Pivot := pPrevPivot
                iPrevPivot  := line.get_x1(lineLast)
                pPrevPivot  := line.get_y1(lineLast)
                iLastPivot  := line.get_x2(lineLast)
                pLastPivot  := line.get_y2(lineLast)

                if not ZigZag
                // ---------------------------------------------------------------------------------------- //

                    line.delete(lineLast)
            
            lineLast   := id
            isHighLast := isHigh
            iPrev      := iLast
            iLast      := iL
            pLast      := pL

// Fibonacci, Pitchfork and Zig Zag
// ---------------------------------------------------------------------------------------- //
// Fibonacci

_draw_line(price, col) =>
    var id = line.new(iLast, price, bar_index, price, color=col, width=1, extend=extending)
    if not na(lineLast)
        line.set_xy1(id, prevLevel ? iPrevPivot : line.get_x1(lineLast), price)
        line.set_xy2(id, line.get_x2(lineLast), price)

_draw_label(price, txt, txtColor) =>
    x                   = labelsPosition == "Left" ? line.get_x1(lineLast) : not extendRight ? line.get_x2(lineLast) : bar_index
    labelStyle          = labelsPosition == "Left" ? label.style_label_right : label.style_label_left
    align               = labelsPosition == "Left" ? text.align_right        : text.align_left
    labelsAlignStrLeft  =             txt + '\n ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏ \n'
    labelsAlignStrRight = '       ' + txt + '\n ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏  ‏ \n'
    labelsAlignStr      = labelsPosition == "Left" ? labelsAlignStrLeft : labelsAlignStrRight
    
    var id = label.new(x=x, y=price, text=labelsAlignStr, textcolor=txtColor, style=labelStyle, textalign=align, color=#00000000)
    label.set_xy(id, x, price)
    label.set_text(id, labelsAlignStr)
    label.set_textcolor(id, txtColor)

_label_txt(level, price) =>
    l = levelsFormat == "Values" ? tostring(level) : tostring(level * 100) + "%"
    (levels ? l : "") + (prices ? " (" + tostring(round(price / syminfo.mintick) * syminfo.mintick) + ")" : "")

_crossing_level(sr, r) =>
    (r > sr and r < sr[1]) or (r < sr and r > sr[1])

// Fibonacci
// ---------------------------------------------------------------------------------------- //
// Pitchfork

f_getPitchfork(_type) =>
    var iStartMedian = 0
    var pStartMedian = 0.
    var iEndMedian   = 0
    var pEndMedian   = 0.
        
    if _type == "Original"
        iStartMedian := iPrev2Pivot
        pStartMedian := pPrev2Pivot
        iEndMedian   := int(avg(iPrevPivot, iLastPivot))
        pEndMedian   := avg(pPrevPivot, pLastPivot)
        
    else if _type == "Schiff"
        iStartMedian := iPrev2Pivot
        pStartMedian := avg(pPrevPivot, pPrev2Pivot)
        iEndMedian   := int(avg(iPrevPivot, iLastPivot))
        pEndMedian   := avg(pPrevPivot, pLastPivot)
        
    else if _type == "Modified Schiff"
        iStartMedian := int(avg(iPrevPivot, iPrev2Pivot))
        pStartMedian := avg(pPrevPivot, pPrev2Pivot)
        iEndMedian   := int(avg(iPrevPivot, iLastPivot))
        pEndMedian   := avg(pPrevPivot, pLastPivot)

    [iStartMedian, pStartMedian, iEndMedian, pEndMedian] 

[iStartMedian, pStartMedian, iEndMedian, pEndMedian] = f_getPitchfork(pTypeP)
pstyle = pstyle_m == "Solid" ? line.style_solid : pstyle_m == "Dotted" ? line.style_dotted : line.style_dashed

var line pitchforkMedian     = na
var line pitchforkAuxiliary1 = na
var line pitchforkAuxiliary2 = na

if pPitch
    line.delete(pitchforkMedian[1])
    line.delete(pitchforkAuxiliary1[1])

    pitchforkMedian := line.new(iStartMedian, pStartMedian, iEndMedian, pEndMedian, xloc.bar_index, pextendL ? extend.both : extend.right, pcolor_m, pstyle, pwidth_m)
    pitchforkAuxiliary1 := line.new(iPrevPivot, pPrevPivot, iLastPivot, pLastPivot, xloc.bar_index, extend.none, pcolor_m, pstyle, pwidth_m)

    if pTypeP != "Original"
        line.delete(pitchforkAuxiliary2[1])
        pitchforkAuxiliary2  := line.new(iPrev2Pivot, pPrev2Pivot, iPrevPivot, pPrevPivot, xloc.bar_index, extend.none, pcolor_m, pstyle, pwidth_m)
    
_crossing_pitchfork_level(sr, r1, r2) =>
    (r1 > sr and r1 < sr[1]) or (r1 < sr and r1 > sr[1]) or (r2 > sr and r2 < sr[1]) or (r2 < sr and r2 > sr[1])

var a_ln  = array.new_line()

if array.size(a_ln) > 0
    a_ln_size = array.size(a_ln)
    for i = 1 to a_ln_size
        ln = array.shift(a_ln)
        line.delete(ln)

_draw_pitchfork_line(_iStart, _pStart, _iEnd, _pEnd, _color, _width, _style, _level) =>
    style = _style == "Solid" ? line.style_solid : _style == "Dotted" ? line.style_dotted : line.style_dashed
    if _iStart < _iEnd
        array.push(a_ln, line.new(_iStart, _pStart, _iEnd, _pEnd, xloc.bar_index, pextendL ? extend.both : extend.right, _color, style, _width))

processPitchforkLevel(show, level, colorL, widthL, styleL) => 
    iStartM     = line.get_x1(pitchforkMedian)
    pStartM     = line.get_y1(pitchforkMedian)
    iEndM       = line.get_x2(pitchforkMedian)
    pEndM       = line.get_y2(pitchforkMedian)

    iPvtDiff    = abs(iPrevPivot - iLastPivot) / 2
    pPvtDiff    = abs(pPrevPivot - pLastPivot) / 2
    
    slopeMedianP= (pEndM - pStartM) / (iEndM - iStartM)
    
    iStartX     = pPrevPivot > pLastPivot ? int(round(iEndM - iPvtDiff * level)) : int(round(iEndM + iPvtDiff * level))
    interceptX  = pEndM + pPvtDiff * level - slopeMedianP * iStartX
    pStartX     = slopeMedianP * iStartX + interceptX
    iEndX       = line.get_x2(lineLast)
    pEndX       = slopeMedianP * iEndX + interceptX

    iStartY     = pPrevPivot > pLastPivot ? int(round(iEndM + iPvtDiff * level)) : int(round(iEndM - iPvtDiff * level))
    interceptY  = pEndM - pPvtDiff * level - slopeMedianP * iStartY
    pStartY     = slopeMedianP * iStartY + interceptY
    iEndY       = line.get_x2(lineLast)
    pEndY       = slopeMedianP * iEndY + interceptY
    
    if show
        _draw_pitchfork_line(iStartX, pStartX, iEndX, pEndX, colorL, widthL, styleL, level)
        _draw_pitchfork_line(iStartY, pStartY, iEndY, pEndY, colorL, widthL, styleL, level)
        
        if _crossing_pitchfork_level(close, slopeMedianP * bar_index + interceptX, slopeMedianP * bar_index + interceptY)
            alert("AutoPitchfork: " + syminfo.ticker + " crossing level " + tostring(level))


pshow_0_25   = input(false   , ""                                         , inline = "pLevel_0_25" , group = group_pitchfork)
pvalue_0_25  = input(.25     , "", minval = .0, maxval = .382, step = .1  , inline = "pLevel_0_25" , group = group_pitchfork)
pcolor_0_25  = input(#ffb74d , ""                                         , inline = "pLevel_0_25" , group = group_pitchfork)
pwidth_0_25  = input(1       , "", minval = 1                             , inline = "pLevel_0_25" , group = group_pitchfork)
pstyle_0_25  = input("Dashed", "", options = ["Dashed", "Dotted", "Solid"], inline = "pLevel_0_25" , group = group_pitchfork)
processPitchforkLevel(pshow_0_25, pvalue_0_25, pcolor_0_25, pwidth_0_25, pstyle_0_25)

pshow_0_382  = input(false   , ""                                         , inline = "pLevel_0_382", group = group_pitchfork)
pvalue_0_382 = input(.382    , "", minval = .25, maxval = .5, step = .1   , inline = "pLevel_0_382", group = group_pitchfork)
pcolor_0_382 = input(#81c784 , ""                                         , inline = "pLevel_0_382", group = group_pitchfork)
pwidth_0_382 = input(1       , "", minval = 1                             , inline = "pLevel_0_382", group = group_pitchfork)
pstyle_0_382 = input("Dotted", "", options = ["Dashed", "Dotted", "Solid"], inline = "pLevel_0_382", group = group_pitchfork)
processPitchforkLevel(pshow_0_382, pvalue_0_382, pcolor_0_382, pwidth_0_382, pstyle_0_382)

pshow_0_50   = input(true    , ""                                         , inline = "pLevel_0_50" , group = group_pitchfork)
pvalue_0_50  = input(.5      , "", minval = .382, maxval = .618, step = .1, inline = "pLevel_0_50" , group = group_pitchfork)
pcolor_0_50  = input(#4caf50 , ""                                         , inline = "pLevel_0_50" , group = group_pitchfork)
pwidth_0_50  = input(1       , "", minval = 1                             , inline = "pLevel_0_50" , group = group_pitchfork)
pstyle_0_50  = input("Solid" , "", options = ["Dashed", "Dotted", "Solid"], inline = "pLevel_0_50" , group = group_pitchfork)
processPitchforkLevel(pshow_0_50, pvalue_0_50, pcolor_0_50, pwidth_0_50, pstyle_0_50)

pshow_0_618  = input(false   , ""                                         , inline = "pLevel_0_618", group = group_pitchfork)
pvalue_0_618 = input(.618    , "", minval = .5, maxval = .75, step = .1   , inline = "pLevel_0_618", group = group_pitchfork)
pcolor_0_618 = input(#009688 , ""                                         , inline = "pLevel_0_618", group = group_pitchfork)
pwidth_0_618 = input(1       , "", minval = 1                             , inline = "pLevel_0_618", group = group_pitchfork)
pstyle_0_618 = input("Dotted", "", options = ["Dashed", "Dotted", "Solid"], inline = "pLevel_0_618", group = group_pitchfork)
processPitchforkLevel(pshow_0_618, pvalue_0_618, pcolor_0_618, pwidth_0_618, pstyle_0_618)

pshow_0_75   = input(false   , ""                                         , inline = "pLevel_0_75" , group = group_pitchfork)
pvalue_0_75  = input(.75     , "", minval = .618, maxval = 1, step = .1   , inline = "pLevel_0_75" , group = group_pitchfork)
pcolor_0_75  = input(#64b5f6 , ""                                         , inline = "pLevel_0_75" , group = group_pitchfork)
pwidth_0_75  = input(1       , "", minval = 1                             , inline = "pLevel_0_75" , group = group_pitchfork)
pstyle_0_75  = input("Dashed", "", options = ["Dashed", "Dotted", "Solid"], inline = "pLevel_0_75" , group = group_pitchfork)
processPitchforkLevel(pshow_0_75, pvalue_0_75, pcolor_0_75, pwidth_0_75, pstyle_0_75)

pshow_1      = input(true    , ""                                         , inline = "pLevel_1"    , group = group_pitchfork)
pvalue_1     = input(1       , "", minval = .75, maxval = 1.5, step = .1  , inline = "pLevel_1"    , group = group_pitchfork)
pcolor_1     = input(#2196f3 , ""                                         , inline = "pLevel_1"    , group = group_pitchfork)
pwidth_1     = input(2       , "", minval = 1                             , inline = "pLevel_1"    , group = group_pitchfork)
pstyle_1     = input("Solid" , "", options = ["Dashed", "Dotted", "Solid"], inline = "pLevel_1"    , group = group_pitchfork)
processPitchforkLevel(pshow_1, pvalue_1, pcolor_1, pwidth_1, pstyle_1)

pshow_1_50   = input(false   , ""                                         , inline = "pLevel_1_50" , group = group_pitchfork)
pvalue_1_50  = input(1.5     , "", minval = 1., maxval = 1.75, step = .1  , inline = "pLevel_1_50" , group = group_pitchfork)
pcolor_1_50  = input(#9c27b0 , ""                                         , inline = "pLevel_1_50" , group = group_pitchfork)
pwidth_1_50  = input(1       , "", minval = 1                             , inline = "pLevel_1_50" , group = group_pitchfork)
pstyle_1_50  = input("Solid" , "", options = ["Dashed", "Dotted", "Solid"], inline = "pLevel_1_50" , group = group_pitchfork)
processPitchforkLevel(pshow_1_50, pvalue_1_50, pcolor_1_50, pwidth_1_50, pstyle_1_50)

pshow_1_75   = input(false   , ""                                         , inline = "pLevel_1_75" , group = group_pitchfork)
pvalue_1_75  = input(1.75    , "", minval = 1.5, maxval = 2., step = .1   , inline = "pLevel_1_75" , group = group_pitchfork)
pcolor_1_75  = input(#e91e63 , ""                                         , inline = "pLevel_1_75" , group = group_pitchfork)
pwidth_1_75  = input(1       , "", minval = 1                             , inline = "pLevel_1_75" , group = group_pitchfork)
pstyle_1_75  = input("Dashed", "", options = ["Dashed", "Dotted", "Solid"], inline = "pLevel_1_75" , group = group_pitchfork)
processPitchforkLevel(pshow_1_75, pvalue_1_75, pcolor_1_75, pwidth_1_75, pstyle_1_75)

pshow_2      = input(false   , ""                                         , inline = "pLevel_2"    , group = group_pitchfork)
pvalue_2     = input(2       , "", minval = 1.75, step = .1               , inline = "pLevel_2"    , group = group_pitchfork)
pcolor_2     = input(#e57373 , ""                                         , inline = "pLevel_2"    , group = group_pitchfork)
pwidth_2     = input(2       , "", minval = 1                             , inline = "pLevel_2"    , group = group_pitchfork)
pstyle_2     = input("Solid" , "", options = ["Dashed", "Dotted", "Solid"], inline = "pLevel_2"    , group = group_pitchfork)
processPitchforkLevel(pshow_2, pvalue_2, pcolor_2, pwidth_2, pstyle_2)

// Pitchfork
// ---------------------------------------------------------------------------------------- //
// Fibonacci 
startPrice = reverse ? prevLevel ? pLastPivot : line.get_y1(lineLast) : prevLevel ? pPrevPivot : pLast
endPrice   = reverse ? prevLevel ? pPrevPivot : pLast : prevLevel ? pLastPivot : line.get_y1(lineLast)

iHL  = startPrice > endPrice
diff = (iHL ? -1 : 1) * abs(startPrice - endPrice)

processLevel(show, value, colorL) => 
    if isFib
        float m = value
        r = startPrice + diff * m
        
        if show
            _draw_line(r, colorL)
            _draw_label(r, _label_txt(m, r), colorL)
            
            if _crossing_level(close, r)
                alert("Autofib: " + syminfo.ticker + " crossing level " + tostring(value))

show_0          = input(true, ""   , inline = "Level0" , group = group_fib_Retracement)
value_0         = input(0, ""      , inline = "Level0" , group = group_fib_Retracement)
color_0         = input(#787b86, "", inline = "Level0" , group = group_fib_Retracement)
processLevel(show_0, value_0, color_0)

show_0_236      = input(true, ""   , inline = "Level0" , group = group_fib_Retracement)
value_0_236     = input(0.236, ""  , inline = "Level0" , group = group_fib_Retracement)
color_0_236     = input(#f44336, "", inline = "Level0" , group = group_fib_Retracement)
processLevel(show_0_236, value_0_236, color_0_236)

show_0_382      = input(true, ""   , inline = "Level1" , group = group_fib_Retracement)
value_0_382     = input(0.382, ""  , inline = "Level1" , group = group_fib_Retracement)
color_0_382     = input(#81c784, "", inline = "Level1" , group = group_fib_Retracement)
processLevel(show_0_382, value_0_382, color_0_382)

show_0_5        = input(true, ""   , inline = "Level1" , group = group_fib_Retracement)
value_0_5       = input(0.5, ""    , inline = "Level1" , group = group_fib_Retracement)
color_0_5       = input(#4caf50, "", inline = "Level1" , group = group_fib_Retracement)
processLevel(show_0_5, value_0_5, color_0_5)

show_0_618      = input(true, ""   , inline = "Level2" , group = group_fib_Retracement)
value_0_618     = input(0.618, ""  , inline = "Level2" , group = group_fib_Retracement)
color_0_618     = input(#009688, "", inline = "Level2" , group = group_fib_Retracement)
processLevel(show_0_618, value_0_618, color_0_618)

show_0_65       = input(false, ""  , inline = "Level2" , group = group_fib_Retracement)
value_0_65      = input(0.65, ""   , inline = "Level2" , group = group_fib_Retracement)
color_0_65      = input(#009688, "", inline = "Level2" , group = group_fib_Retracement)
processLevel(show_0_65, value_0_65, color_0_65)

show_0_786      = input(true, ""   , inline = "Level3" , group = group_fib_Retracement)
value_0_786     = input(0.786, ""  , inline = "Level3" , group = group_fib_Retracement)
color_0_786     = input(#64b5f6, "", inline = "Level3" , group = group_fib_Retracement)
processLevel(show_0_786, value_0_786, color_0_786)

show_1          = input(true, ""   , inline = "Level3" , group = group_fib_Retracement)
value_1         = input(1, ""      , inline = "Level3" , group = group_fib_Retracement)
color_1         = input(#787b86, "", inline = "Level3" , group = group_fib_Retracement)
processLevel(show_1, value_1, color_1)

show_1_272      = input(false, ""  , inline = "Level4" , group = group_fib_Retracement)
value_1_272     = input(1.272, ""  , inline = "Level4" , group = group_fib_Retracement)
color_1_272     = input(#81c784, "", inline = "Level4" , group = group_fib_Retracement)
processLevel(show_1_272, value_1_272, color_1_272)

show_1_414      = input(false, ""  , inline = "Level4" , group = group_fib_Retracement)
value_1_414     = input(1.414, ""  , inline = "Level4" , group = group_fib_Retracement)
color_1_414     = input(#f44336, "", inline = "Level4" , group = group_fib_Retracement)
processLevel(show_1_414, value_1_414, color_1_414)

show_1_618      = input(true, ""   , inline = "Level5" , group = group_fib_Retracement)
value_1_618     = input(1.618, ""  , inline = "Level5" , group = group_fib_Retracement)
color_1_618     = input(#2196f3, "", inline = "Level5" , group = group_fib_Retracement)
processLevel(show_1_618, value_1_618, color_1_618)

show_1_65       = input(false, ""  , inline = "Level5" , group = group_fib_Retracement)
value_1_65      = input(1.65, ""   , inline = "Level5" , group = group_fib_Retracement)
color_1_65      = input(#2196f3, "", inline = "Level5" , group = group_fib_Retracement)
processLevel(show_1_65, value_1_65, color_1_65)

show_2_618      = input(false, ""  , inline = "Level6" , group = group_fib_Retracement)
value_2_618     = input(2.618, ""  , inline = "Level6" , group = group_fib_Retracement)
color_2_618     = input(#f44336, "", inline = "Level6" , group = group_fib_Retracement)
processLevel(show_2_618, value_2_618, color_2_618)

show_2_65       = input(false, ""  , inline = "Level6" , group = group_fib_Retracement)
value_2_65      = input(2.65, ""   , inline = "Level6" , group = group_fib_Retracement)
color_2_65      = input(#f44336, "", inline = "Level6" , group = group_fib_Retracement)
processLevel(show_2_65, value_2_65, color_2_65)

show_3_618      = input(false, ""  , inline = "Level7" , group = group_fib_Retracement)
value_3_618     = input(3.618, ""  , inline = "Level7" , group = group_fib_Retracement)
color_3_618     = input(#9c27b0, "", inline = "Level7" , group = group_fib_Retracement)
processLevel(show_3_618, value_3_618, color_3_618)

show_3_65       = input(false, ""  , inline = "Level7" , group = group_fib_Retracement)
value_3_65      = input(3.65, ""   , inline = "Level7" , group = group_fib_Retracement)
color_3_65      = input(#9c27b0, "", inline = "Level7" , group = group_fib_Retracement)
processLevel(show_3_65, value_3_65, color_3_65)

show_4_236      = input(false, ""  , inline = "Level8" , group = group_fib_Retracement)
value_4_236     = input(4.236, ""  , inline = "Level8" , group = group_fib_Retracement)
color_4_236     = input(#e91e63, "", inline = "Level8" , group = group_fib_Retracement)
processLevel(show_4_236, value_4_236, color_4_236)

show_4_618      = input(false, ""  , inline = "Level8" , group = group_fib_Retracement)
value_4_618     = input(4.618, ""  , inline = "Level8" , group = group_fib_Retracement)
color_4_618     = input(#81c784, "", inline = "Level8" , group = group_fib_Retracement)
processLevel(show_4_618, value_4_618, color_4_618)

show_neg_0_236  = input(false, ""  , inline = "Level9" , group = group_fib_Retracement)
value_neg_0_236 = input(-0.236, "" , inline = "Level9" , group = group_fib_Retracement)
color_neg_0_236 = input(#f44336, "", inline = "Level9" , group = group_fib_Retracement)
processLevel(show_neg_0_236, value_neg_0_236, color_neg_0_236)

show_neg_0_382  = input(false, ""  , inline = "Level9" , group = group_fib_Retracement)
value_neg_0_382 = input(-0.382, "" , inline = "Level9" , group = group_fib_Retracement)
color_neg_0_382 = input(#81c784, "", inline = "Level9" , group = group_fib_Retracement)
processLevel(show_neg_0_382, value_neg_0_382, color_neg_0_382)

show_neg_0_618  = input(false, ""  , inline = "Level10", group = group_fib_Retracement)
value_neg_0_618 = input(-0.618, "" , inline = "Level10", group = group_fib_Retracement)
color_neg_0_618 = input(#009688, "", inline = "Level10", group = group_fib_Retracement)
processLevel(show_neg_0_618, value_neg_0_618, color_neg_0_618)

show_neg_0_65   = input(false, ""  , inline = "Level10", group = group_fib_Retracement)
value_neg_0_65  = input(-0.65, ""  , inline = "Level10", group = group_fib_Retracement)
color_neg_0_65  = input(#009688, "", inline = "Level10", group = group_fib_Retracement)
processLevel(show_neg_0_65, value_neg_0_65, color_neg_0_65)

// Fibonacci 
// ---------------------------------------------------------------------------------------- //